{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { _storeData, _retrieveData } from \"../utils/storage\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as React from 'react';\nimport { API_ENDPOINT } from \"../utils/constants\";\nimport axios from 'axios';\nimport UserNavigation from \"./userNavigation\";\nimport GuestNavigation from \"./guestNavigation\";\nimport { Button } from '@rneui/themed';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar getSpotifyCredentials = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var res = yield axios.get(API_ENDPOINT + '/api/spotify-credentials');\n    var spotifyCredentials = res.data;\n    return spotifyCredentials;\n  });\n  return function getSpotifyCredentials() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar refreshTokens = function () {\n  var _ref2 = _asyncToGenerator(function* (credentials, refreshToken) {\n    var credsB64 = btoa(credentials.clientId + \":\" + credentials.clientSecret);\n    var response = yield fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        Authorization: \"Basic \" + credsB64,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: \"grant_type=refresh_token&refresh_token=\" + refreshToken\n    });\n    var responseJson = response.json();\n    return responseJson;\n  });\n  return function refreshTokens(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default function Main() {\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    accessToken = _React$useState2[0],\n    setAccessToken = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    refreshToken = _React$useState4[0],\n    setRefreshToken = _React$useState4[1];\n  var _React$useState5 = React.useState(0),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    expirationTime = _React$useState6[0],\n    setExpirationTime = _React$useState6[1];\n  var _React$useState7 = React.useState(true),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    loading = _React$useState8[0],\n    setLoading = _React$useState8[1];\n  function isExpired(expTime) {\n    if (new Date().getTime() > expTime) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  var tokenRefreshWorkflow = function tokenRefreshWorkflow() {\n    try {\n      var accessTokenTemp = '';\n      var refreshTokenTemp = '';\n      var expirationTimeTemp = '';\n      _retrieveData('accessToken').then(function (aToken) {\n        accessTokenTemp = aToken;\n        _retrieveData('refreshToken').then(function (rToken) {\n          refreshTokenTemp = rToken;\n          _retrieveData('expirationTime').then(function (eTime) {\n            expirationTimeTemp = eTime;\n            console.log(\"hi?\");\n            if (accessTokenTemp && refreshTokenTemp && expirationTimeTemp) {\n              console.log(\"muaahhh\");\n              console.log(expirationTimeTemp);\n              if (isExpired(expirationTimeTemp)) {\n                getSpotifyCredentials().then(function (credentials) {\n                  refreshTokens(credentials, refreshTokenTemp).then(function (responseJson) {\n                    console.log(\"Response JSON\");\n                    console.log(responseJson);\n                    if (Object.keys(responseJson).includes(\"expires_in\")) {\n                      if (responseJson[\"expires_in\"]) {\n                        var accessTokenNew = responseJson.access_token,\n                          refreshTokenNew = responseJson.refresh_token,\n                          expiresInNew = responseJson.expires_in;\n                        var expirationTimeNew = new Date().getTime() + expiresInNew * 1000;\n                        _storeData('accessToken', accessTokenNew);\n                        _storeData('refreshToken', refreshTokenNew);\n                        _storeData('expirationTime', expirationTimeNew);\n                        setAccessToken(accessTokenTemp);\n                        setRefreshToken(refreshTokenTemp);\n                        setExpirationTime(expirationTimeTemp);\n                        setLoading(false);\n                        console.log(\"loading?\");\n                        return true;\n                      }\n                    }\n                  });\n                });\n              } else {\n                if (accessTokenTemp !== accessToken) {\n                  setAccessToken(accessTokenTemp);\n                }\n                if (refreshToken !== refreshTokenTemp) {\n                  setRefreshToken(refreshTokenTemp);\n                }\n                if (expirationTime !== expirationTimeTemp) {\n                  setExpirationTime(expirationTimeTemp);\n                }\n                setLoading(false);\n                console.log(\"loading?\");\n                return true;\n              }\n            } else {\n              setLoading(false);\n            }\n          });\n        });\n      });\n    } catch (err) {\n      setLoading(false);\n      return false;\n    }\n  };\n  React.useEffect(function () {\n    tokenRefreshWorkflow();\n  }, []);\n  var logOutUser = function logOutUser() {\n    _storeData('accessToken', '');\n    _storeData('refreshToken', '');\n    _storeData('expirationTime', '');\n    setAccessToken('');\n    setRefreshToken('');\n    setExpirationTime(0);\n  };\n  return _jsxs(NavigationContainer, {\n    children: [accessToken && refreshToken && expirationTime && !loading && _jsx(_Fragment, {\n      children: _jsx(UserNavigation, {})\n    }), !accessToken && isExpired(expirationTime) && !loading && _jsx(GuestNavigation, {\n      setAccessToken: setAccessToken,\n      setRefreshToken: setRefreshToken,\n      setExpirationTime: setExpirationTime\n    }), loading && _jsx(View, {\n      children: _jsx(\"h1\", {\n        children: \"Loading.....\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["_storeData","_retrieveData","React","API_ENDPOINT","axios","UserNavigation","GuestNavigation","Button","NavigationContainer","getSpotifyCredentials","res","get","spotifyCredentials","data","refreshTokens","credentials","refreshToken","credsB64","btoa","clientId","clientSecret","response","fetch","method","headers","Authorization","body","responseJson","json","Main","useState","accessToken","setAccessToken","setRefreshToken","expirationTime","setExpirationTime","loading","setLoading","isExpired","expTime","Date","getTime","tokenRefreshWorkflow","accessTokenTemp","refreshTokenTemp","expirationTimeTemp","then","aToken","rToken","eTime","console","log","Object","keys","includes","accessTokenNew","access_token","refreshTokenNew","refresh_token","expiresInNew","expires_in","expirationTimeNew","err","useEffect","logOutUser"],"sources":["/Users/paulgaudin/Desktop/r_cast/rcast_frontend/src/components/main.js"],"sourcesContent":["import {_storeData, _retrieveData} from \"../utils/storage\"\nimport { View } from 'react-native';\nimport * as React from 'react';\nimport { API_ENDPOINT } from \"../utils/constants\"\nimport axios from 'axios'\nimport UserNavigation from \"./userNavigation\";\n\nimport GuestNavigation from \"./guestNavigation\";\n\nimport { Button } from '@rneui/themed';\n\nimport { NavigationContainer } from '@react-navigation/native';\n\n\n\n\nconst getSpotifyCredentials = async () => {\n    const res = await axios.get(API_ENDPOINT + '/api/spotify-credentials')\n    const spotifyCredentials = res.data\n    return spotifyCredentials\n  }\n\n\nconst refreshTokens  = async(credentials, refreshToken) => {\n    const credsB64 = btoa(`${credentials.clientId}:${credentials.clientSecret}`);\n    const response =  await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n        Authorization: `Basic ${credsB64}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    });\n    const responseJson = response.json();\n    return responseJson\n}\n\n\nexport default function Main() {\n\n\n    const [accessToken, setAccessToken] = React.useState('')\n    const [refreshToken, setRefreshToken] = React.useState('')\n    const [expirationTime , setExpirationTime ] = React.useState(0)\n    const [loading, setLoading] = React.useState(true)\n\n\n    function isExpired(expTime){\n        if(new Date().getTime() > expTime){\n            return true\n        }else{\n            return false\n        }\n        \n    }\n\n\n    const tokenRefreshWorkflow = () => {\n       \n        try{\n            var accessTokenTemp = '';\n            var refreshTokenTemp = '';\n            var expirationTimeTemp = '';\n            \n            _retrieveData('accessToken').then(aToken => {\n                accessTokenTemp = aToken\n                _retrieveData('refreshToken').then(rToken => {\n                    refreshTokenTemp = rToken\n                    _retrieveData('expirationTime').then(eTime => {\n                        expirationTimeTemp = eTime\n                        console.log(\"hi?\")\n                        if(accessTokenTemp && refreshTokenTemp && expirationTimeTemp){\n                            console.log(\"muaahhh\")\n                            console.log(expirationTimeTemp)\n    \n                            if (isExpired(expirationTimeTemp)) {\n                                /// REFRESH TOKENS\n                                getSpotifyCredentials().then(credentials => {\n                                    refreshTokens(credentials, refreshTokenTemp).then(responseJson => {\n                                        console.log(\"Response JSON\")\n                                        console.log(responseJson)\n                                        if(Object.keys(responseJson).includes(\"expires_in\")){\n                                            if(responseJson[\"expires_in\"]){\n                                                const {\n                                                    access_token: accessTokenNew,\n                                                    refresh_token: refreshTokenNew,\n                                                    expires_in: expiresInNew,\n                                                  } = responseJson;\n                                                  const expirationTimeNew = new Date().getTime() + expiresInNew * 1000;\n                                                  _storeData('accessToken', accessTokenNew);\n                                                  _storeData('refreshToken', refreshTokenNew);\n                                                  _storeData('expirationTime', expirationTimeNew);\n                                                  setAccessToken(accessTokenTemp)\n                                                  setRefreshToken(refreshTokenTemp)\n                                                  setExpirationTime(expirationTimeTemp)\n                                                  setLoading(false)\n                                                  console.log(\"loading?\")\n                                                  return true\n                                            }\n                                        }\n    \n        \n                                    })\n                                })\n    \n                            } else {\n                                if(accessTokenTemp !== accessToken){\n                                    setAccessToken(accessTokenTemp)\n                                }\n                                if(refreshToken !== refreshTokenTemp){\n                                    setRefreshToken(refreshTokenTemp)\n                                }\n                                if(expirationTime !== expirationTimeTemp){\n                                    setExpirationTime(expirationTimeTemp)\n                                }\n                                setLoading(false)\n                                console.log(\"loading?\")\n                                return true\n                            }\n                        }else{\n                            setLoading(false)\n                        }\n                        \n                    })\n                });\n            });\n        }catch(err){\n            setLoading(false)\n            return false\n        }\n\n    }\n\n    React.useEffect(() => {\n        tokenRefreshWorkflow()\n    },[])\n\n\n    const logOutUser = () => {\n        _storeData('accessToken', '');\n        _storeData('refreshToken', '');\n        _storeData('expirationTime','');\n        setAccessToken('')\n        setRefreshToken('')\n        setExpirationTime(0)\n    }\n    return(\n        <NavigationContainer>\n\n            {accessToken && refreshToken && expirationTime && !loading && \n    \n                <>\n                <UserNavigation\n                >\n\n                </UserNavigation>\n                {/* <Button\n                title=\"Log out\"\n                onPress={() => {\n                    logOutUser();\n                }}\n                type=\"outline\"\n                /> */}\n                </>\n\n            }\n            {!accessToken && isExpired(expirationTime) && !loading && \n                <GuestNavigation\n                    setAccessToken={setAccessToken}\n                    setRefreshToken={setRefreshToken}\n                    setExpirationTime={setExpirationTime}\n                >\n\n                </GuestNavigation>\n            }{loading &&\n                <View>\n                    <h1>Loading.....</h1>\n                </View>\n\n\n            }\n\n        </NavigationContainer>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}