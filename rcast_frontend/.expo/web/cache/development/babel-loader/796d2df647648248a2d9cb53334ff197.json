{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { encode as btoa } from 'base-64';\nimport * as AuthSession from 'expo-auth-session';\nimport axios from 'axios';\nimport { API_ENDPOINT } from \"./constants\";\nexport var getSpotifyCredentials = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var res = yield axios.get(API_ENDPOINT + '/api/spotify-credentials');\n    var spotifyCredentials = res.data;\n    return spotifyCredentials;\n  });\n  return function getSpotifyCredentials() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar scopesArr = ['user-modify-playback-state', 'user-read-currently-playing', 'user-read-playback-state', 'user-library-modify', 'user-library-read', 'playlist-read-private', 'playlist-read-collaborative', 'playlist-modify-public', 'playlist-modify-private', 'user-read-recently-played', 'user-top-read'];\nvar scopes = scopesArr.join(' ');\nexport var getAuthorizationCode = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var credentials = yield getSpotifyCredentials();\n      var redirectUrl = AuthSession.getRedirectUrl();\n      var _result = yield AuthSession.startAsync({\n        authUrl: 'https://accounts.spotify.com/authorize' + '?response_type=code' + '&client_id=' + credentials.clientId + (scopes ? '&scope=' + encodeURIComponent(scopes) : '') + '&redirect_uri=' + encodeURIComponent(redirectUrl)\n      });\n      console.log(_result);\n    } catch (err) {\n      console.error(err);\n    }\n    return result.params.code;\n  });\n  return function getAuthorizationCode() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTokens = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      console.log(\"Um\");\n      var authorizationCode = yield getAuthorizationCode();\n      var credentials = yield getSpotifyCredentials();\n      var credsB64 = btoa(credentials.clientId + \":\" + credentials.clientSecret);\n      console.log(\"HI\");\n      var response = yield fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          Authorization: \"Basic \" + credsB64,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"grant_type=authorization_code&code=\" + authorizationCode + \"&redirect_uri=\" + credentials.redirectUri\n      });\n      console.log(\"HI2\");\n      var responseJson = yield response.json();\n      var accessToken = responseJson.access_token,\n        refreshToken = responseJson.refresh_token,\n        expiresIn = responseJson.expires_in;\n      var expirationTime = new Date().getTime() + expiresIn * 1000;\n      yield setUserData('accessToken', accessToken);\n      yield setUserData('refreshToken', refreshToken);\n      yield setUserData('expirationTime', expirationTime);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n  return function getTokens() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var refreshTokens = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      var credentials = yield getSpotifyCredentials();\n      var credsB64 = btoa(credentials.clientId + \":\" + credentials.clientSecret);\n      var refreshToken = yield getUserData('refreshToken');\n      var response = yield fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          Authorization: \"Basic \" + credsB64,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"grant_type=refresh_token&refresh_token=\" + refreshToken\n      });\n      var responseJson = yield response.json();\n      if (responseJson.error) {\n        yield getTokens();\n      } else {\n        var newAccessToken = responseJson.access_token,\n          newRefreshToken = responseJson.refresh_token,\n          expiresIn = responseJson.expires_in;\n        var expirationTime = new Date().getTime() + expiresIn * 1000;\n        yield setUserData('accessToken', newAccessToken);\n        if (newRefreshToken) {\n          yield setUserData('refreshToken', newRefreshToken);\n        }\n        yield setUserData('expirationTime', expirationTime);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  });\n  return function refreshTokens() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["encode","btoa","AuthSession","axios","API_ENDPOINT","getSpotifyCredentials","res","get","spotifyCredentials","data","scopesArr","scopes","join","getAuthorizationCode","credentials","redirectUrl","getRedirectUrl","result","startAsync","authUrl","clientId","encodeURIComponent","console","log","err","error","params","code","getTokens","authorizationCode","credsB64","clientSecret","response","fetch","method","headers","Authorization","body","redirectUri","responseJson","json","accessToken","access_token","refreshToken","refresh_token","expiresIn","expires_in","expirationTime","Date","getTime","setUserData","refreshTokens","getUserData","newAccessToken","newRefreshToken"],"sources":["/Users/paulgaudin/Desktop/r_cast/rcast_frontend/src/utils/loginUtils.js"],"sourcesContent":["import { encode as btoa } from 'base-64';\nimport * as AuthSession from 'expo-auth-session';\nimport axios from 'axios'\nimport { API_ENDPOINT } from './constants';\n\nexport const getSpotifyCredentials = async () => {\n  const res = await axios.get(API_ENDPOINT + '/api/spotify-credentials')\n  const spotifyCredentials = res.data\n  return spotifyCredentials\n}\n\nconst scopesArr = ['user-modify-playback-state','user-read-currently-playing','user-read-playback-state','user-library-modify',\n                   'user-library-read','playlist-read-private','playlist-read-collaborative','playlist-modify-public',\n                   'playlist-modify-private','user-read-recently-played','user-top-read'];\nconst scopes = scopesArr.join(' ');\n\nexport const getAuthorizationCode = async () => {\n  try {\n    const credentials = await getSpotifyCredentials() //we wrote this function above\n    const redirectUrl = AuthSession.getRedirectUrl(); //this will be something like https://auth.expo.io/@your-username/your-app-slug\n    const result = await AuthSession.startAsync({\n      authUrl:\n        'https://accounts.spotify.com/authorize' +\n        '?response_type=code' +\n        '&client_id=' +\n        credentials.clientId +\n        (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\n        '&redirect_uri=' +\n        encodeURIComponent(redirectUrl),\n    })\n    console.log(result)\n  } catch (err) {\n    console.error(err)\n  }\n  return result.params.code\n}\n\n\n\nexport const getTokens = async () => {\n  try {\n    console.log(\"Um\")\n    const authorizationCode = await getAuthorizationCode() //we wrote this function above\n    const credentials = await getSpotifyCredentials() //we wrote this function above (could also run this outside of the functions and store the credentials in local scope)\n    const credsB64 = btoa(`${credentials.clientId}:${credentials.clientSecret}`);\n    console.log(\"HI\")\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        Authorization: `Basic ${credsB64}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${\n        credentials.redirectUri\n      }`,\n    });\n    console.log(\"HI2\")\n    const responseJson = await response.json();\n    // destructure the response and rename the properties to be in camelCase to satisfy my linter ;)\n    const {\n      access_token: accessToken,\n      refresh_token: refreshToken,\n      expires_in: expiresIn,\n    } = responseJson;\n\n    const expirationTime = new Date().getTime() + expiresIn * 1000;\n    await setUserData('accessToken', accessToken);\n    await setUserData('refreshToken', refreshToken);\n    await setUserData('expirationTime', expirationTime);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\n\nexport const refreshTokens = async () => {\n    try {\n      const credentials = await getSpotifyCredentials() //we wrote this function above\n      const credsB64 = btoa(`${credentials.clientId}:${credentials.clientSecret}`);\n      const refreshToken = await getUserData('refreshToken');\n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          Authorization: `Basic ${credsB64}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n      });\n      const responseJson = await response.json();\n      if (responseJson.error) {\n        await getTokens();\n      } else {\n        const {\n          access_token: newAccessToken,\n          refresh_token: newRefreshToken,\n          expires_in: expiresIn,\n        } = responseJson;\n  \n        const expirationTime = new Date().getTime() + expiresIn * 1000;\n        await setUserData('accessToken', newAccessToken);\n        if (newRefreshToken) {\n          await setUserData('refreshToken', newRefreshToken);\n        }\n        await setUserData('expirationTime', expirationTime);\n    } }\n    catch (err) {\n      console.error(err)\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}